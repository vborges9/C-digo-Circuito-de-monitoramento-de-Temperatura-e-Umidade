#include <DHT.h>
#include <DHT_U.h>

#include <DHT.h>

#include <DHT.h>
#include <DHT_U.h>

/*
* Exemplo de como usar o dispositivo SinricPro Temperaturesensor:
 * - configurar um dispositivo sensor de temperatura
 * - enviar evento de temperatura para o servidor SinricPro quando a temperatura mudou
 * 
 * DHT Sensor is connected to D5 on ESP8266 devices / GPIO5 on ESP32 devices
 *
 * Biblioteca DHT usada neste exemplo: https://github.com/markruys/arduino-DHT
 * 
 * Se você encontrar algum problema:
 * - Verifique o arquivo readme.md em https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md
 * - certifique-se de que todas as bibliotecas dependentes estejam instaladas
 *   - see https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md#arduinoide
 *   - see https://github.com/sinricpro/esp8266-esp32-sdk/blob/master/README.md#dependencies
 * - abra o monitor serial e verifique o que está acontecendo
 * - verifique a documentação completa do usuário em https://sinricpro.github.io/esp8266-esp32-sdk
 * - visite https://github.com/sinricpro/esp8266-esp32-sdk/issues e verifique se há problemas existentes ou abra um novo
 */

// Descomente a seguinte linha para habilitar a saída de depuração serial
//#define ENABLE_DEBUG

#ifdef ENABLE_DEBUG
       #define DEBUG_ESP_PORT Serial
       #define NODEBUG_WEBSOCKETS
       #define NDEBUG
#endif 


#include <Arduino.h>
#ifdef ESP8266 
       #include <ESP8266WiFi.h>
#endif 
#ifdef ESP32   
       #include <WiFi.h>
#endif

#include "SinricPro.h"
#include "SinricProTemperaturesensor.h"
#include "DHT.h" // https://github.com/markruys/arduino-DHT

#define WIFI_SSID         "Vinicius Borges "    
#define WIFI_PASS         "vini3100"
#define APP_KEY           "86bf04b9-cec8-4c51-a923-0c4ace63ab6e"      // Deve parecer com isso "de0bxxxx-1x3x-4x3x-ax2x-5dabxxxxxxxx"
#define APP_SECRET        "f2665d32-ad85-4dae-a232-b13d33cd5e2b-7c04652b-4fa7-472e-b59d-be634800586d"   // Deve parecer com isso "5f36xxxx-x3x7-4x3x-xexe-e86724a9xxxx-4c4axxxx-3x3x-x5xe-x9x3-333d65xxxxxx"
#define TEMP_SENSOR_ID    "66eb5c4746a89b75c2709922"    // Deve parecer com isso "5dc1564130xxxxxxxxxxxxxx"
#define BAUD_RATE         9600                // Altere a taxa de transmissão de acordo com sua necessidade (usado para monitor serial)
#define EVENT_WAIT_TIME   60000               // send event every 60 seconds

#ifdef ESP8266
       #define DHT_PIN    D5
#endif,
#ifdef ESP32
       #define DHT_PIN    5z 
#endif

DHT dht;                                      // DHT sensor

bool deviceIsOn;                              // Estado ligado/desligado do sensor de temperatura
float temperature;                            // temperatura atual
float humidity;                               // Umidade atual
float lastTemperature;                        // última temperatura conhecida (para comparação)
float lastHumidity;                           // última umidade conhecida (para comparação)
unsigned long lastEvent = (-EVENT_WAIT_TIME); // última vez que o evento foi enviado

/* bool onPowerState(String deviceId, bool &state)
 *
 * Retorno de chamada para solicitação setPowerState
 * parâmetros
 * String deviceId (r)
 * contém deviceId (útil se este retorno de chamada for usado por vários dispositivos)
 * bool &state (r/w)
 * contém o estado solicitado (true:on / false:off)
 * deve retornar o novo estado
 *
 * Retorna
 * true se a solicitação deve ser marcada como tratada corretamente / false se não
 */
bool onPowerState(const String &deviceId, bool &state) {
  Serial.printf("Temperaturesensor está %s (via SinricPro) \r\n", state?"Ligado":"Desligado");
  deviceIsOn = state; // liga/desliga o sensor de temperatura
  return true; // pedido tratado corretamente
}

/* handleTemperatatureSensor()
 * - Verifica se o sensor de temperatura está ligado
 * - Verifica se o tempo desde o último evento > EVENT_WAIT_TIME para evitar o envio de muitos eventos
 * - Obtenha temperatura e umidade reais e verifique se esses valores são válidos
 * - Compara a temperatura e a umidade reais com a última temperatura e umidade conhecidas
 * - Enviar evento para o SinricPro Server se a temperatura ou a umidade forem alteradas
 */
void handleTemperaturesensor() {
  if (deviceIsOn == false) return; // dispositivo está desligado... não faça nada

  unsigned long actualMillis = millis();
  if (actualMillis - lastEvent < EVENT_WAIT_TIME) return; //verifique apenas a cada milissegundos EVENT_WAIT_TIME 

  temperature = dht.getTemperature();          // obtem  temperatura atual em °C

  humidity = dht.getHumidity();                // obtem umidade atual

  if (isnan(temperature) || isnan(humidity)) { // se a leitura falhou...
    Serial.printf("DHT apresentou falha na leitura!\r\n");  // Imprime mensagem de erro 
    return;                                    // tente novamente da próxima vez
  } 

  if (temperature == lastTemperature || humidity == lastHumidity) return; // se nenhum valor for alterado não faça nada...

  SinricProTemperaturesensor &mySensor = SinricPro[TEMP_SENSOR_ID];  // obtem dispositivo temperaturesensor
  bool success = mySensor.sendTemperatureEvent(temperature, humidity); // envia evento
  if (success) {  // se o evento foi enviado com sucesso, imprima temperatura e umidade para serial
    Serial.printf("Temperatura: %2.1f Celsius\tUmidade: %2.1f%%\r\n", temperature, humidity);
  } else {  // se o envio do evento falhou, imprime a mensagem de erro
    Serial.printf("Algo deu errado... não foi possível enviar o evento para o servidor!\r\n");
  }

  lastTemperature = temperature;  // salva a temperatura real para a próxima comparação
  lastHumidity = humidity;        // salva a umidade real para a próxima comparação
  lastEvent = actualMillis;       // salva o tempo real para a próxima comparação
}


//função de configuração para conexão WiFi
void setupWiFi() {
  Serial.printf("\r\n[Wifi]: Conectando");
  WiFi.begin(WIFI_SSID, WIFI_PASS);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.printf(".");
    delay(250);
  }
  IPAddress localIP = WiFi.localIP();
  Serial.printf("conectado!\r\n[WiFi]: O endereço IP é: %d.%d.%d.%d\r\n", localIP[0], localIP[1], localIP[2], localIP[3]);
}

//função de configuração para SinricPro
void setupSinricPro() {
  // adiciona dispositivo ao SinricPro
  SinricProTemperaturesensor &mySensor = SinricPro[TEMP_SENSOR_ID];
  mySensor.onPowerState(onPowerState);

  // setup SinricPro
  SinricPro.onConnected([](){ Serial.printf("Conectado ao SinricPro\r\n"); }); 
  SinricPro.onDisconnected([](){ Serial.printf("Desconectado do SinricPro\r\n"); });
  SinricPro.begin(APP_KEY, APP_SECRET);
  SinricPro.restoreDeviceStates(true); // obtém o último deviceState conhecido do servidor (o dispositivo está ligado?)
}

// função de configuração principal
void setup() {
  Serial.begin(BAUD_RATE); Serial.printf("\r\n\r\n");
  dht.setup(DHT_PIN);

  setupWiFi();
  setupSinricPro();
}

void loop() {
  SinricPro.handle();
  handleTemperaturesensor();
}
